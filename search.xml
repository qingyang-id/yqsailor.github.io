<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[IPFS]]></title>
    <url>%2F2018%2F09%2F13%2Fipfs%2F</url>
    <content type="text"><![CDATA[IPFS的全称是InterPlanetary File System星际文件系统，是一个点对点的网络超媒体协议。它的目标是成为更快、更安全、更开放的下一代互联网。 IPFS介绍IPFS尝试解决HTTP目前存在的四个问题：. 服务低效，成本高。这也是大部分P2P服务比中心化服务器优秀的地方。 . 网络服务受限于供应商，文件具有无法永久保存的风险，更无法历史回溯。 . 中心化的网络权力过于集中，网络控制和监管某些程度上限制了科技创新。 . 互联网服务大多依赖于骨干网络，一旦宕机大部分服务将无法使用。 IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。 在IPFS网络上，每个IPFS上的文件都具备一个唯一的哈希码。IPFS同时具备了文件去重和历史版本的功能，每个网络节点会存储自己感兴趣的内容，并且索引其它内容的位置，用户可以通过哈希码来寻找到每个文件的具体位置。此外IPFS本身还自带一个IPNS的域名，可以把你的内容和你的个人域名进行绑定。 IPFS的下载与安装可参考官网：https://ipfs.io/docs/install ，备注：目前需要科学上网才能访问 本文以mac环境下安装为例进行说明（mac下也可以用homebrew执行brew install ipfs进行安装），在terminal内输入以下命令进行下载与安装。本文时间(2018.9.13)的最新版本为v0.4.17，123tar go-ipfs_v0.4.17_darwin-amd64.tar.gzcd go-ipfs./install.sh 安装后使用help命令，可以测试是否成功。 ipfs help IPFS的启动使用参考：https://ipfs.io/docs/getting-started 首先进行初始化，创建一个全局的本地仓库与配置文件。 ipfs init 然后需要开启IPFS的进程从而与网络保持连接状态。这里加上&amp;是为了让进程在后台运行，可以在开启后同时按CTRL键C键回到之前界面。 ipfs daemon &amp; 可以通过下面的命令查看我们在IPFS网络上已经连接的节点 ipfs swarm peers IPFS的使用这里讲解一下hexo搭建的个人博客上传到IPFS网络上。hexo搭建个人博客请移步至hexo+next搭建个人博客，并发布到git pages 1、使用命令ipfs id查看你的电脑的ipfs id 2、修改全局配置_config.yml中的root为/ipns/${ipfsId},其中的ipfsId为你电脑对应的ipfs id 3、在你的hexo搭建的博客根目录下执行如下命令打包生成对应的静态文件。 hexo generate（hexo g也可以） 4、通过ipfs add命令，直接把项目直接添加到IPFS网络。 ipfs add -r public/ 5、通过ipfs name pulished命令，把项目绑定到IPNS。 ipfs name publish QmcmaC834fyeqXuxZmkKd2ukSLsZY5tprGffzCXrpKzAZ8 完成这一步后，你应该会在Terminal里看到如下运行结果，你的ipfs id标识了你的文件在网路上的位置。 Published to 你的ipfs id: /ipfs/QmcmaC834fyeqXuxZmkKd2ukSLsZY5tprGffzCXrpKzAZ8 6、现在你的文件已经在IPFS上了，网络为了避免垃圾资源过度的情况会在一段时间之后清空数据。为了保证我们的文件能够一直保持在IPFS网络上，我们需要执行pin命令，这样只要你的IPFS进程还开启着，数据就不会被垃圾回收。 ipfs pin add -r QmcmaC834fyeqXuxZmkKd2ukSLsZY5tprGffzCXrpKzAZ8 现在你的个人网站已经搭建在了一个完全去中心化的网络上了。你可以通过网址 https://gateway.ipfs.io/ipns/你的ipfsId 访问你的个人主页，也可以通过http://127.0.0.1:8080/ipns/你的ipfsId 。另外要注意的是，IPFS的网关目前需要科学上网才能连接，当然，在没有优化之前，访问会很慢，但可以打开。 7、 绑定独立域名将博客发布到了IPFS运行的区块链节点上，但复杂的site_hash并不友好，我们可以使用IPNS技术，通过绑定独立域名来实现与现有的网站访问并无任何不一样的体现。我们假设你已经有一个可以正常使用的域名，如aa.com，没有域名的可以到任意域名服务商初购买。 有了域名之后，为域名aa.com添加TXT记录为dnslink=/ipns/你的ipfsId,同时将域名A记录指向任意ipfs节点的ip，如gateway.ipfs.io。 现在访问aa.com，你是不是发现已经可以正常访问你刚才生成的博客了。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>IPFS</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Next 搭建个人博客]]></title>
    <url>%2F2018%2F09%2F12%2Fhexo%2F</url>
    <content type="text"><![CDATA[突然有了写博客的想法，今天就研究了下如何搭建自己的博客，之后看到了比较流行的组合为Hexo + Next + Git pages，于事就一步步搭建了自己的博客，中间也踩了很多坑，因此想把这个经过记录下来，希望能帮到一些想搭建自己的博客的同志们。 为什么选择HexoHexo 是一个快速、简洁且高效的静态站点生成框架，它基于 Node.js 。 它有以下特点： 超快速度Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。 支持MarkdownHexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一键部署只需一条指令即可部署到Github Pages，或其他网站 丰富的插件Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。 基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的主题。NexT 因其 精于心，简于形 的风格，一直被广大用户所喜爱。 环境要求安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装: Node.jsGit 安装 Git Mac：一般情况下自带git无需安装，如未安装使用 Homebrew，MacPorts 或下载 安装程序 安装 Windows：下载安装 git 。 Download Now 安装 Node.js安装 Node.js 的最佳方式是使用 nvm。（nvm：Node Version Manager） Mac 下安装 nvm1、执行如下命令，需要先安装Git12$ cd ~/$ git clone https://github.com/creationix/nvm.git .nvm 2、将以下代码添加到 ~/.bashrc, ~/.profile, 或者 ~/.zshrc 文件中，然后执行命令source ~/.bashrc重启配置信息123export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh" # This loads nvm[ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion Windows 下安装 nvm首先需要下载安装nvm-windows， Download Now 安装完nvm以后，我们可以打开命令行中执行命令12$ nvm$ nvm install latest 执行完以后，重启命令行，执行命令 node -v ，如果出现版本号，那么 Node.js 就安装成功了。 如果没有安装成功，那可能就是墙的原因。建议下载 Node.js 直接安装。 Download Now 安装 Hexo有了 Node.js ，我们可以使用 npm 安装 Hexo。1$ npm install -g hexo-cli 安装 Hexo 完成后，我们首先需要为我们的项目创建一个指定文件夹（例如我创建了一个文件夹blog 。/Users/yq/blog ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。1$ hexo init 等待安装，安装完成后，指定文件夹 的目录如下：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── 我们继续执行命令12$ hexo g$ hexo s --debug Hexo 将 source 文件夹中除 _posts 文件夹之外，开头命名为 _(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。这个时候，我们在浏览器中访问 http://localhost:4000/ ，就可以看到基于 Hexo 的默认主题的原型： 安装 NexT 主题1、下载 NexT 主题依旧是在当前目录下，执行如下命令：1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 等待下载完成。在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 我们将前者称为 站点配置文件，后者称为 主题配置文件 2、启用 NexT 主题打开 站点配置文件 ，找到 theme 字段，并将其值更改为 next 。到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 hexo clean 来清除 Hexo 的缓存。 3、验证主题首先启动 Hexo 本地站点，并开启调试模式（即加上 --debug），整个命令是 hexo s --debug。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示： 1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可使用浏览器访问 http://localhost:4000/ ，检查站点是否正确运行。 当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse 现在，我们已经成功安装并启用了 NexT 主题。 关于更多基本操作和基础知识，请查阅 Hexo 与 NexT 官方文档. 发布到GitHub创建新仓库Github Pages分为两类，用户或组织主页，项目主页。 创建用户或组织主页，只需创建一个名称为{yourusername}.github.io的新仓库即可。这边的yourusername填写自己的用户名。Github会识别并自动将该仓库设为Github Pages。用户主页是唯一的，填其他名称只会被当成普通项目。创建项目主页。先新建一个仓库，名称随意，或是使用原有的仓库都可以。在项目主页 -&gt; Settings -&gt; Options -&gt; Github Pages中，将Source选项置为master branch(如果无法设置就先选择一个主题)，然后Save，这个项目就变成一个Github Pages项目了。 安装deploy插件1$ npm install hexo-deployer-git --save 配置发布信息修改主题配置文件中的仓库信息12345deploy: type: git repo: &lt;repository url&gt; # 仓库地址，例如我的是https://github.com/yqsailor/yqsailor.github.io branch: [branch] # 仓库分支，一般为master message: [message] # git提交注释，此项可留空 总结本地调试步骤三部曲：123$ hexo clean$ hexo g$ hexo s --debug 这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。 部署步骤三部曲：123$ hexo clean$ hexo g$ hexo d 当然在部署之前，需要先配置好配置文件中的 deploy。 常用命令1234567$ hexo new "postName" #新建文章$ hexo new page "pageName" # 新建页面$ hexo generate # 生成静态页面至public目录$ hexo server # 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)$ hexo deploy # 项目部署$ hexo help # 查看帮助$ hexo version # 查看Hexo的版本 简写命令1234$ hexo new == hexo n$ hexo generate == hexo g$ hexo server == hexo s$ hexo deploy == hexo d 常见问题1在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：正确的设置：123author: yqemail: yqsailor@gmail.comlanguage: zh-Hans 常见问题2关于 Git 提交中用户名和 Email 的设置12git config --global user.name &quot;Your name&quot;git config --global user.email &quot;Your email&quot; 常见问题3Hexo 中的图标使用的是 Font Awesome ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。 &lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt; 最后要说的是： 博客源码 ， 欢迎 star]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
