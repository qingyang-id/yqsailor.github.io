<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sailor&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/f0a11b74c6f6203dc74f7202fbe88c6a</icon>
  <subtitle>Stay Hungry,Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yqsailor.github.io/"/>
  <updated>2018-09-15T09:06:16.932Z</updated>
  <id>http://yqsailor.github.io/</id>
  
  <author>
    <name>Sailor</name>
    <email>yqsailor@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenZeppelin ERC20源码分析</title>
    <link href="http://yqsailor.github.io/2018/09/15/erc20/"/>
    <id>http://yqsailor.github.io/2018/09/15/erc20/</id>
    <published>2018-09-15T09:45:05.000Z</published>
    <updated>2018-09-15T09:06:16.932Z</updated>
    
    <content type="html"><![CDATA[<p>ERC20：Ethereum Request for Comments 20，是一个基于以太坊代币的接口标准（协议）。所有符合 ERC-20 标准的代币都能立即兼容以太坊钱包，它能让用户和交易所，都能非常方便的管理多种代币，转账、存储、ICO 等等。</p><p>OpenZeppelin 的 Token 中实现了 ERC20 的一个安全的合约代码，本篇主要来分析一下源码，了解一下 ERC20 的实现，由于代码之间的调用可能略复杂，直接每个文件每个文件的来看会有点绕，我直接画了一个继承和调用关系的思维导图，可以帮助更容易地看源码。</p><img src="/2018/09/15/erc20/images/open-zeppeline-erc20.png" title="OpenZeppeline ERC20"><a id="more"></a><h1 id="ERC20Basic-sol"><a href="#ERC20Basic-sol" class="headerlink" title="ERC20Basic.sol"></a>ERC20Basic.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">contract ERC20Basic &#123;</span><br><span class="line">  function totalSupply() public view returns (uint256);</span><br><span class="line">  function balanceOf(address who) public view returns (uint256);</span><br><span class="line">  function transfer(address to, uint256 value) public returns (bool);</span><br><span class="line">  event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ERC20Basic 合约主要定义了 ERC20 的基本接口，定义了必须要实现的方法:</p><p>totalSupply 返回总共发行量<br>balanceOf 查询指定 address 的余额<br>transfer 发送指定数目的 token 到指定账户，同时发送后需要触发Transfer事件<br>Transfer事件,任何 token 发送发生时，必须触发该事件，即使是 0 额度。 当一个 token 合约创建时，应该触发一个 Transfer 事件，token 的发送方是 0x0，也就是说凭空而来的 token，简称空气币。</p><h1 id="ERC20-sol"><a href="#ERC20-sol" class="headerlink" title="ERC20.sol"></a>ERC20.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./ERC20Basic.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract ERC20 is ERC20Basic &#123;</span><br><span class="line">  function allowance(address owner, address spender)</span><br><span class="line">    public view returns (uint256);</span><br><span class="line"></span><br><span class="line">  function transferFrom(address from, address to, uint256 value)</span><br><span class="line">    public returns (bool);</span><br><span class="line"></span><br><span class="line">  function approve(address spender, uint256 value) public returns (bool);</span><br><span class="line">  event Approval(</span><br><span class="line">    address indexed owner,</span><br><span class="line">    address indexed spender,</span><br><span class="line">    uint256 value</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ERC20 合约继承了 ERC20Basic，另外定义了 approve 相关的方法:</p><p>allowance 获取指定用户的批准额度，控制代币的交易，如可交易账号及资产, 控制 Token 的流通<br>transferFrom 从一个地址向另外一个地址转账指定额度的 token，这个方法可以理解为一个收款流程，允许合约来代表 token 持有者发送代币。比如，合约可以帮助你向另外一个人发送 token 或者索要 token。前提是 token 拥有者必须要通过某些机制对这个请求进行确认，比如通过 MetaMask 进行 confirm。否则，执行将失败。 跟 transfer 一样，即使发送 0 代币，也要触发Transfer事件。<br>approve 批准额度，允许一个账户最多能从你的账户你取现指定额度。重复调用时，以最后一次的额度为主。为了防止攻击，最开始这个额度必须设置为 0。<br>Approval事件，当 approve 被调用时，需要触发该事件。</p><h1 id="DetailedERC20-sol"><a href="#DetailedERC20-sol" class="headerlink" title="DetailedERC20.sol"></a>DetailedERC20.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract DetailedERC20 is ERC20 &#123;</span><br><span class="line">  string public name;</span><br><span class="line">  string public symbol;</span><br><span class="line">  uint8 public decimals;</span><br><span class="line"></span><br><span class="line">  constructor(string _name, string _symbol, uint8 _decimals) public &#123;</span><br><span class="line">    name = _name;</span><br><span class="line">    symbol = _symbol;</span><br><span class="line">    decimals = _decimals;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DetailedERC20 主要定义了 token 的展示信息:</p><p>name token 的名称,比如”XXXToken”<br>symbol token 的符号,比如”XXX”<br>decimals token 精确的小数点位数，比如 18</p><h1 id="BasicToken-sol"><a href="#BasicToken-sol" class="headerlink" title="BasicToken.sol"></a>BasicToken.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./ERC20Basic.sol&quot;;</span><br><span class="line">import &quot;../../math/SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title 实现ERC20基本合约的接口</span><br><span class="line"> * @dev 基本的StandardToken，不包含allowances.</span><br><span class="line"> */</span><br><span class="line">contract BasicToken is ERC20Basic &#123;</span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line"></span><br><span class="line">  mapping(address =&gt; uint256) balances;</span><br><span class="line"></span><br><span class="line">  uint256 totalSupply_;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @dev 返回存在的token总数</span><br><span class="line">  */</span><br><span class="line">  function totalSupply() public view returns (uint256) &#123;</span><br><span class="line">    return totalSupply_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @dev 给特定的address转token</span><br><span class="line">  * @param _to 要转账到的address</span><br><span class="line">  * @param _value 要转账的金额</span><br><span class="line">  */</span><br><span class="line">  function transfer(address _to, uint256 _value) public returns (bool) &#123;</span><br><span class="line">    //做相关的合法验证</span><br><span class="line">    require(_to != address(0));</span><br><span class="line">    require(_value &lt;= balances[msg.sender]);</span><br><span class="line">    // msg.sender余额中减去额度，_to余额加上相应额度</span><br><span class="line">    balances[msg.sender] = balances[msg.sender].sub(_value);</span><br><span class="line">    balances[_to] = balances[_to].add(_value);</span><br><span class="line">    //触发Transfer事件</span><br><span class="line">    emit Transfer(msg.sender, _to, _value);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @dev 获取指定address的余额</span><br><span class="line">  * @param _owner 查询余额的address.</span><br><span class="line">  * @return An uint256 representing the amount owned by the passed address.</span><br><span class="line">  */</span><br><span class="line">  function balanceOf(address _owner) public view returns (uint256) &#123;</span><br><span class="line">    return balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过SafeMath来做运算很重要，在我们自己写合约的时候也尽量使用，可以避免一些计算过程的溢出等安全问题。</p><h1 id="StandardToken-sol"><a href="#StandardToken-sol" class="headerlink" title="StandardToken.sol"></a>StandardToken.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./BasicToken.sol&quot;;</span><br><span class="line">import &quot;./ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title 标准 ERC20 token</span><br><span class="line"> *</span><br><span class="line"> * @dev 实现基础的标准token</span><br><span class="line"> * @dev https://github.com/ethereum/EIPs/issues/20</span><br><span class="line"> * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol</span><br><span class="line"> */</span><br><span class="line">contract StandardToken is ERC20, BasicToken &#123;</span><br><span class="line">  mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 从一个地址向另外一个地址转token</span><br><span class="line">   * @param _from 转账的from地址</span><br><span class="line">   * @param _to address 转账的to地址</span><br><span class="line">   * @param _value uint256 转账token数量</span><br><span class="line">   */</span><br><span class="line">  function transferFrom(</span><br><span class="line">    address _from,</span><br><span class="line">    address _to,</span><br><span class="line">    uint256 _value</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    // 做合法性检查</span><br><span class="line">    require(_to != address(0));</span><br><span class="line">    require(_value &lt;= balances[_from]);</span><br><span class="line">    require(_value &lt;= allowed[_from][msg.sender]);</span><br><span class="line">    //_from余额减去相应的金额</span><br><span class="line">    //_to余额加上相应的金额</span><br><span class="line">    //msg.sender可以从账户_from中转出的数量减少_value</span><br><span class="line">    balances[_from] = balances[_from].sub(_value);</span><br><span class="line">    balances[_to] = balances[_to].add(_value);</span><br><span class="line">    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);</span><br><span class="line">    // 触发Transfer事件</span><br><span class="line">    emit Transfer(_from, _to, _value);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 批准传递的address以代表msg.sender花费指定数量的token</span><br><span class="line">   *</span><br><span class="line">   * Beware that changing an allowance with this method brings the risk that someone may use both the old</span><br><span class="line">   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this</span><br><span class="line">   * race condition is to first reduce the spender&apos;s allowance to 0 and set the desired value afterwards:</span><br><span class="line">   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729</span><br><span class="line">   * @param _spender 花费资金的地址</span><br><span class="line">   * @param _value 可以被花费的token数量</span><br><span class="line">   */</span><br><span class="line">  function approve(address _spender, uint256 _value) public returns (bool) &#123;</span><br><span class="line">    //记录msg.sender允许_spender动用的token</span><br><span class="line">    allowed[msg.sender][_spender] = _value;</span><br><span class="line">    //触发Approval事件</span><br><span class="line">    emit Approval(msg.sender, _spender, _value);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 函数检查所有者允许的_spender花费的token数量</span><br><span class="line">   * @param _owner address 资金所有者地址.</span><br><span class="line">   * @param _spender address 花费资金的spender的地址.</span><br><span class="line">   * @return A uint256 指定_spender仍可用token的数量。</span><br><span class="line">   */</span><br><span class="line">  function allowance(</span><br><span class="line">    address _owner,</span><br><span class="line">    address _spender</span><br><span class="line">   )</span><br><span class="line">    public</span><br><span class="line">    view</span><br><span class="line">    returns (uint256)</span><br><span class="line">  &#123;</span><br><span class="line">    //允许_spender从_owner中转出的token数</span><br><span class="line">    return allowed[_owner][_spender];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 增加所有者允许_spender花费代币的数量。</span><br><span class="line">   *</span><br><span class="line">   * allowed[_spender] == 0时approve应该被调用. 增加allowed值最好使用此函数避免2此调用（等待知道第一笔交易被挖出）</span><br><span class="line">   * From MonolithDAO Token.sol</span><br><span class="line">   * @param _spender 花费资金的地址</span><br><span class="line">   * @param _addedValue 用于增加允许动用的token牌数量</span><br><span class="line">   */</span><br><span class="line">  function increaseApproval(</span><br><span class="line">    address _spender,</span><br><span class="line">    uint _addedValue</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    //在之前允许的数量上增加_addedValue</span><br><span class="line">    allowed[msg.sender][_spender] = (</span><br><span class="line">      allowed[msg.sender][_spender].add(_addedValue));</span><br><span class="line">    //触发Approval事件</span><br><span class="line">    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 减少所有者允许_spender花费代币的数量</span><br><span class="line">   *</span><br><span class="line">   * allowed[_spender] == 0时approve应该被调用. 减少allowed值最好使用此函数避免2此调用（等待知道第一笔交易被挖出）</span><br><span class="line">   * From MonolithDAO Token.sol</span><br><span class="line">   * @param _spender  花费资金的地址</span><br><span class="line">   * @param _subtractedValue 用于减少允许动用的token牌数量</span><br><span class="line">   */</span><br><span class="line">  function decreaseApproval(</span><br><span class="line">    address _spender,</span><br><span class="line">    uint _subtractedValue</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    uint oldValue = allowed[msg.sender][_spender];</span><br><span class="line">    if (_subtractedValue &gt; oldValue) &#123;</span><br><span class="line">    //减少的数量少于之前允许的数量，则清零</span><br><span class="line">      allowed[msg.sender][_spender] = 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    //减少对应的_subtractedValue数量</span><br><span class="line">      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);</span><br><span class="line">    &#125;</span><br><span class="line">    //触发Approval事件</span><br><span class="line">    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面合约定义的 mapping allowed，它用来记录某个地址允许另外一个地址动用多少 token。假设钱包地址为 B，有另外一个合约其合约地址为 C，合约 C 会通过支付 XXX Token 来做一些事情，根据 ERC20 的定义，每个地址只能操作属于自己的 Token，则合约 C 无法直接使用 B 地址所拥有的 Token，这时候 allowed Mapping 就派上用场了，它上面可以记录一个允许操作值，像是「B 钱包地址允许 C 合约地址动用属于 B 钱包地址的 1000 XXX Token」，以 Mapping 的结构来说标记为「B =&gt; C =&gt; 1000」</p><h1 id="BurnableToken-sol"><a href="#BurnableToken-sol" class="headerlink" title="BurnableToken.sol"></a>BurnableToken.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./BasicToken.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title 可销毁 Token</span><br><span class="line"> * @dev Token可以被不可逆转地销毁</span><br><span class="line"> */</span><br><span class="line">contract BurnableToken is BasicToken &#123;</span><br><span class="line"></span><br><span class="line">  event Burn(address indexed burner, uint256 value);</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 销毁指定数量的token.</span><br><span class="line">   * @param _value 被销毁的token数量.</span><br><span class="line">   */</span><br><span class="line">  function burn(uint256 _value) public &#123;</span><br><span class="line">    _burn(msg.sender, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function _burn(address _who, uint256 _value) internal &#123;</span><br><span class="line">    require(_value &lt;= balances[_who]);</span><br><span class="line">    //不需要验证value &lt;= totalSupply，因为这意味着发送者的余额大于总供应量，这应该是断言失败</span><br><span class="line">    balances[_who] = balances[_who].sub(_value);</span><br><span class="line">    totalSupply_ = totalSupply_.sub(_value);</span><br><span class="line">    emit Burn(_who, _value);</span><br><span class="line">    emit Transfer(_who, address(0), _value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该合约比较简单，就是调用者可以销毁一定数量的 token，然后 totalSupply 减去对应销毁的数量</p><h1 id="StandardBurnableToken-sol"><a href="#StandardBurnableToken-sol" class="headerlink" title="StandardBurnableToken.sol"></a>StandardBurnableToken.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./BurnableToken.sol&quot;;</span><br><span class="line">import &quot;./StandardToken.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title 标准可销毁token</span><br><span class="line"> * @dev 将burnFrom方法添加到ERC20实现中</span><br><span class="line"> */</span><br><span class="line">contract StandardBurnableToken is BurnableToken, StandardToken &#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 从目标地址销毁特定数量的token并减少允许量</span><br><span class="line">   * @param _from address token所有者地址</span><br><span class="line">   * @param _value uint256 被销毁的token数量</span><br><span class="line">   */</span><br><span class="line">  function burnFrom(address _from, uint256 _value) public &#123;</span><br><span class="line">    require(_value &lt;= allowed[_from][msg.sender]);</span><br><span class="line">    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,</span><br><span class="line">    // 此方法需要触发具有更新批准的事件。</span><br><span class="line">    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);</span><br><span class="line">    _burn(_from, _value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MintableToken-sol"><a href="#MintableToken-sol" class="headerlink" title="MintableToken.sol"></a>MintableToken.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./StandardToken.sol&quot;;</span><br><span class="line">import &quot;../../ownership/Ownable.sol&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title 可增发 token</span><br><span class="line"> * @dev 简单的可增发的 ERC20 Token 示例</span><br><span class="line"> * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120</span><br><span class="line"> * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol</span><br><span class="line"> */</span><br><span class="line">contract MintableToken is StandardToken, Ownable &#123;</span><br><span class="line">  event Mint(address indexed to, uint256 amount);</span><br><span class="line">  event MintFinished();</span><br><span class="line">  //初始化增发状态为false</span><br><span class="line">  bool public mintingFinished = false;</span><br><span class="line"></span><br><span class="line">  modifier canMint() &#123;</span><br><span class="line">    // 检查没有增发结束</span><br><span class="line">    require(!mintingFinished);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier hasMintPermission() &#123;</span><br><span class="line">    //owner只能为msg.sender</span><br><span class="line">    require(msg.sender == owner);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 增发token方法</span><br><span class="line">   * @param _to 获取增发token的地址_to.</span><br><span class="line">   * @param _amount 增发的token数量.</span><br><span class="line">   * @return A boolean that indicates if the operation was successful.</span><br><span class="line">   */</span><br><span class="line">  function mint(</span><br><span class="line">    address _to,</span><br><span class="line">    uint256 _amount</span><br><span class="line">  )</span><br><span class="line">    hasMintPermission</span><br><span class="line">    canMint</span><br><span class="line">    public</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    // 总发行量增加_amount数量的token</span><br><span class="line">    totalSupply_ = totalSupply_.add(_amount);</span><br><span class="line">    // 获取增发的地址增加_amount数量的token</span><br><span class="line">    balances[_to] = balances[_to].add(_amount);</span><br><span class="line">    // 触发增发事件</span><br><span class="line">    emit Mint(_to, _amount);</span><br><span class="line">    // 触发Transfer事件</span><br><span class="line">    emit Transfer(address(0), _to, _amount);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 停止增发新token.</span><br><span class="line">   * @return True if the operation was successful.</span><br><span class="line">   */</span><br><span class="line">  function finishMinting() onlyOwner canMint public returns (bool) &#123;</span><br><span class="line">    // 改变增发状态为已完成</span><br><span class="line">    mintingFinished = true;</span><br><span class="line">    // 触发增发已完成事件</span><br><span class="line">    emit MintFinished();</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增发 token 的合约也很简单，就是通过增发一定量的 token 给对应的 address，并给总发行量增加对应的增发 token，可以通过调用finishMinting来完成增发。</p><h1 id="CappedToken-sol"><a href="#CappedToken-sol" class="headerlink" title="CappedToken.sol"></a>CappedToken.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./MintableToken.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title 上限 token</span><br><span class="line"> * @dev 设置一个顶的可增发token.</span><br><span class="line"> */</span><br><span class="line">contract CappedToken is MintableToken &#123;</span><br><span class="line"></span><br><span class="line">  uint256 public cap;</span><br><span class="line"></span><br><span class="line">  constructor(uint256 _cap) public &#123;</span><br><span class="line">    require(_cap &gt; 0);</span><br><span class="line">    cap = _cap;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 增发token</span><br><span class="line">   * @param _to 获取增发token的地址_to.</span><br><span class="line">   * @param _amount 增发token数量.</span><br><span class="line">   * @return A boolean that indicates if the operation was successful.</span><br><span class="line">   */</span><br><span class="line">  function mint(</span><br><span class="line">    address _to,</span><br><span class="line">    uint256 _amount</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    // 验证总发行量+增发量小于所设置的上限</span><br><span class="line">    require(totalSupply_.add(_amount) &lt;= cap);</span><br><span class="line">    // 调用父合约的增发方法</span><br><span class="line">    return super.mint(_to, _amount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CappedToken 也很简单，就是在可增发合约上加了一个”cap”，来限制增发的上限</p><h1 id="RBACMintableToken-sol"><a href="#RBACMintableToken-sol" class="headerlink" title="RBACMintableToken.sol"></a>RBACMintableToken.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./MintableToken.sol&quot;;</span><br><span class="line">import &quot;../../ownership/rbac/RBAC.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title RBACMintableToken</span><br><span class="line"> * @author Vittorio Minacori (@vittominacori)</span><br><span class="line"> * @dev Mintable Token, with RBAC minter permissions</span><br><span class="line"> */</span><br><span class="line">contract RBACMintableToken is MintableToken, RBAC &#123;</span><br><span class="line">  /**</span><br><span class="line">   * 指定一个增发者的常量名.</span><br><span class="line">   */</span><br><span class="line">  string public constant ROLE_MINTER = &quot;minter&quot;;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 重写Mintable token合约的 modifier，增加角色有关的逻辑</span><br><span class="line">   */</span><br><span class="line">  modifier hasMintPermission() &#123;</span><br><span class="line">    // 调用RBAC合约中的角色检查</span><br><span class="line">    checkRole(msg.sender, ROLE_MINTER);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 将一个地址添加为可增发者角色</span><br><span class="line">   * @param minter address</span><br><span class="line">   */</span><br><span class="line">  function addMinter(address minter) onlyOwner public &#123;</span><br><span class="line">    addRole(minter, ROLE_MINTER);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 将一个地址移除可增发者角色</span><br><span class="line">   * @param minter address</span><br><span class="line">   */</span><br><span class="line">  function removeMinter(address minter) onlyOwner public &#123;</span><br><span class="line">    removeRole(minter, ROLE_MINTER);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RBACMintableToken 合约将增发操作中添加了 RBAC 逻辑，就是角色权限管理的逻辑，将一个地址这是为增发者角色，也可以移除一个地址的增发者角色，只有拥有”minter”角色的 address 才有权限增发 token</p><h1 id="SafeERC20-sol"><a href="#SafeERC20-sol" class="headerlink" title="SafeERC20.sol"></a>SafeERC20.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./ERC20Basic.sol&quot;;</span><br><span class="line">import &quot;./ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SafeERC20</span><br><span class="line"> * @dev 围绕ERC20操作发生故障的包装程序.</span><br><span class="line"> * 可以在合约中通过这样使用这个库 `using SafeERC20 for ERC20;` 来使用安全的操作`token.safeTransfer(...)`</span><br><span class="line"> */</span><br><span class="line">library SafeERC20 &#123;</span><br><span class="line">  function safeTransfer(ERC20Basic token, address to, uint256 value) internal &#123;</span><br><span class="line">    require(token.transfer(to, value));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function safeTransferFrom(</span><br><span class="line">    ERC20 token,</span><br><span class="line">    address from,</span><br><span class="line">    address to,</span><br><span class="line">    uint256 value</span><br><span class="line">  )</span><br><span class="line">    internal</span><br><span class="line">  &#123;</span><br><span class="line">    require(token.transferFrom(from, to, value));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function safeApprove(ERC20 token, address spender, uint256 value) internal &#123;</span><br><span class="line">    require(token.approve(spender, value));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SafeERC20 是一个 ERC20 的安全操作库，在下面的TokenTimelock锁定期后释放 token 的合约中我们可以看到用法</p><h1 id="TokenTimelock-sol"><a href="#TokenTimelock-sol" class="headerlink" title="TokenTimelock.sol"></a>TokenTimelock.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./SafeERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title TokenTimelock 锁定期释放token</span><br><span class="line"> * @dev TokenTimelock 是一个令token持有人合同，将允许一个受益人在给定的发布时间之后提取token</span><br><span class="line"> */</span><br><span class="line">contract TokenTimelock &#123;</span><br><span class="line">  //这里用到了上面的SafeERC20</span><br><span class="line">  using SafeERC20 for ERC20Basic;</span><br><span class="line"></span><br><span class="line">  // ERC20 basic token contract being held</span><br><span class="line">  ERC20Basic public token;</span><br><span class="line"></span><br><span class="line">  // token被释放后的受益人address</span><br><span class="line">  address public beneficiary;</span><br><span class="line"></span><br><span class="line">  // token可以被释放的时间戳</span><br><span class="line">  uint256 public releaseTime;</span><br><span class="line">  // 对token，受益人address和释放时间初始化</span><br><span class="line">  constructor(</span><br><span class="line">    ERC20Basic _token,</span><br><span class="line">    address _beneficiary,</span><br><span class="line">    uint256 _releaseTime</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">  &#123;</span><br><span class="line">    require(_releaseTime &gt; block.timestamp);</span><br><span class="line">    token = _token;</span><br><span class="line">    beneficiary = _beneficiary;</span><br><span class="line">    releaseTime = _releaseTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @notice 将时间限制内的token转移给受益人.</span><br><span class="line">   */</span><br><span class="line">  function release() public &#123;</span><br><span class="line">    require(block.timestamp &gt;= releaseTime);</span><br><span class="line"></span><br><span class="line">    uint256 amount = token.balanceOf(this);</span><br><span class="line">    require(amount &gt; 0);</span><br><span class="line"></span><br><span class="line">    token.safeTransfer(beneficiary, amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TokenTimelock 合约通过初始化受益人以及释放的时间和锁定的 token，通过release来将锁定期过后释放的 token 转给受益人</p><h1 id="TokenVesting-sol"><a href="#TokenVesting-sol" class="headerlink" title="TokenVesting.sol"></a>TokenVesting.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./ERC20Basic.sol&quot;;</span><br><span class="line">import &quot;./SafeERC20.sol&quot;;</span><br><span class="line">import &quot;../../ownership/Ownable.sol&quot;;</span><br><span class="line">import &quot;../../math/SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title TokenVesting 定期释放token</span><br><span class="line"> * @dev token持有人合同可以逐渐释放token余额典型的归属方案，有断崖时间和归属期, 可选择可撤销的所有者。</span><br><span class="line"> */</span><br><span class="line">contract TokenVesting is Ownable &#123;</span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line">  using SafeERC20 for ERC20Basic;</span><br><span class="line"></span><br><span class="line">  event Released(uint256 amount);</span><br><span class="line">  event Revoked();</span><br><span class="line"></span><br><span class="line">  // 释放后的token收益人</span><br><span class="line">  address public beneficiary;</span><br><span class="line"></span><br><span class="line">  uint256 public cliff; //断崖表示「锁仓4年，1年之后一次性解冻25%」中的一年</span><br><span class="line">  uint256 public start;//起始时间</span><br><span class="line">  uint256 public duration;//持续锁仓时间</span><br><span class="line"></span><br><span class="line">  bool public revocable;</span><br><span class="line"></span><br><span class="line">  mapping (address =&gt; uint256) public released;</span><br><span class="line">  mapping (address =&gt; bool) public revoked;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 创建一份归属权合同，将任何ERC20 token的余额归属给_beneficiary,逐渐以线性方式，直到_start + _duration 所有的余额都将归属。</span><br><span class="line">   * @param _beneficiary 授予转让token的受益人的地址</span><br><span class="line">   * @param _cliff 持续时间以秒为单位，代币将开始归属</span><br><span class="line">   * @param _start 归属开始的时间（如Unix时间)</span><br><span class="line">   * @param _duration 持续时间以token的归属期限为单位</span><br><span class="line">   * @param _revocable 归属是否可撤销</span><br><span class="line">   */</span><br><span class="line">  constructor(</span><br><span class="line">    address _beneficiary,</span><br><span class="line">    uint256 _start,</span><br><span class="line">    uint256 _cliff,</span><br><span class="line">    uint256 _duration,</span><br><span class="line">    bool _revocable</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">  &#123;</span><br><span class="line">    require(_beneficiary != address(0));</span><br><span class="line">    require(_cliff &lt;= _duration);</span><br><span class="line"></span><br><span class="line">    beneficiary = _beneficiary;</span><br><span class="line">    revocable = _revocable;</span><br><span class="line">    duration = _duration;</span><br><span class="line">    cliff = _start.add(_cliff);</span><br><span class="line">    start = _start;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @notice 将归属代币转让给受益人.</span><br><span class="line">   * @param token ERC20 token which is being vested</span><br><span class="line">   */</span><br><span class="line">  function release(ERC20Basic token) public &#123;</span><br><span class="line">    uint256 unreleased = releasableAmount(token);</span><br><span class="line"></span><br><span class="line">    require(unreleased &gt; 0);</span><br><span class="line"></span><br><span class="line">    released[token] = released[token].add(unreleased);</span><br><span class="line"></span><br><span class="line">    token.safeTransfer(beneficiary, unreleased);</span><br><span class="line"></span><br><span class="line">    emit Released(unreleased);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @notice允许所有者撤销归属。 token已经归属合约，其余归还给所有者。</span><br><span class="line">   * @param token ERC20 token which is being vested</span><br><span class="line">   */</span><br><span class="line">  function revoke(ERC20Basic token) public onlyOwner &#123;</span><br><span class="line">    require(revocable);</span><br><span class="line">    require(!revoked[token]);</span><br><span class="line"></span><br><span class="line">    uint256 balance = token.balanceOf(this);</span><br><span class="line"></span><br><span class="line">    uint256 unreleased = releasableAmount(token);</span><br><span class="line">    uint256 refund = balance.sub(unreleased);</span><br><span class="line"></span><br><span class="line">    revoked[token] = true;</span><br><span class="line"></span><br><span class="line">    token.safeTransfer(owner, refund);</span><br><span class="line"></span><br><span class="line">    emit Revoked();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 计算已归属但尚未释放的金额。</span><br><span class="line">   * @param token ERC20 token which is being vested</span><br><span class="line">   */</span><br><span class="line">  function releasableAmount(ERC20Basic token) public view returns (uint256) &#123;</span><br><span class="line">    return vestedAmount(token).sub(released[token]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 计算已归属的金额.</span><br><span class="line">   * @param token ERC20 token which is being vested</span><br><span class="line">   */</span><br><span class="line">  function vestedAmount(ERC20Basic token) public view returns (uint256) &#123;</span><br><span class="line">    uint256 currentBalance = token.balanceOf(this);</span><br><span class="line">    uint256 totalBalance = currentBalance.add(released[token]);</span><br><span class="line"></span><br><span class="line">    if (block.timestamp &lt; cliff) &#123;</span><br><span class="line">      return 0;</span><br><span class="line">    &#125; else if (block.timestamp &gt;= start.add(duration) || revoked[token]) &#123;</span><br><span class="line">      return totalBalance;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return totalBalance.mul(block.timestamp.sub(start)).div(duration);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TokenVesting 也是锁仓的一种方式，主要解决的是有断崖时间和持续锁仓时间的锁仓场景</p><h1 id="PausableToken-sol"><a href="#PausableToken-sol" class="headerlink" title="PausableToken.sol"></a>PausableToken.sol</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.23;</span><br><span class="line"></span><br><span class="line">import &quot;./StandardToken.sol&quot;;</span><br><span class="line">import &quot;../../lifecycle/Pausable.sol&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title Pausable token</span><br><span class="line"> * @dev StandardToken modified with pausable transfers.</span><br><span class="line"> **/</span><br><span class="line">contract PausableToken is StandardToken, Pausable &#123;</span><br><span class="line"></span><br><span class="line">  function transfer(</span><br><span class="line">    address _to,</span><br><span class="line">    uint256 _value</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    whenNotPaused</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    return super.transfer(_to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function transferFrom(</span><br><span class="line">    address _from,</span><br><span class="line">    address _to,</span><br><span class="line">    uint256 _value</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    whenNotPaused</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    return super.transferFrom(_from, _to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function approve(</span><br><span class="line">    address _spender,</span><br><span class="line">    uint256 _value</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    whenNotPaused</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    return super.approve(_spender, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function increaseApproval(</span><br><span class="line">    address _spender,</span><br><span class="line">    uint _addedValue</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    whenNotPaused</span><br><span class="line">    returns (bool success)</span><br><span class="line">  &#123;</span><br><span class="line">    return super.increaseApproval(_spender, _addedValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function decreaseApproval(</span><br><span class="line">    address _spender,</span><br><span class="line">    uint _subtractedValue</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    whenNotPaused</span><br><span class="line">    returns (bool success)</span><br><span class="line">  &#123;</span><br><span class="line">    return super.decreaseApproval(_spender, _subtractedValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PausableToken 继承了 StandardToken，但是在方法中都添加了whenNotPaused函数修改器，whenNotPaused 继承自 Pausable 合约，Pausable 有个 paused 来标记暂停的状态，从而控制合约的是否暂停。</p><p>OpenZeppelin ERC20 源码分析到这里就结束了。</p><p>转载自Ryan <a href="https://yuanxuxu.com/2018/06/27/openzeppelin-erc20-code-analysis" target="_blank" rel="noopener">是菜鸟 | LNMP 技术栈笔记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ERC20：Ethereum Request for Comments 20，是一个基于以太坊代币的接口标准（协议）。所有符合 ERC-20 标准的代币都能立即兼容以太坊钱包，它能让用户和交易所，都能非常方便的管理多种代币，转账、存储、ICO 等等。&lt;/p&gt;
&lt;p&gt;OpenZeppelin 的 Token 中实现了 ERC20 的一个安全的合约代码，本篇主要来分析一下源码，了解一下 ERC20 的实现，由于代码之间的调用可能略复杂，直接每个文件每个文件的来看会有点绕，我直接画了一个继承和调用关系的思维导图，可以帮助更容易地看源码。&lt;/p&gt;
&lt;img src=&quot;/2018/09/15/erc20/images/open-zeppeline-erc20.png&quot; title=&quot;OpenZeppeline ERC20&quot;&gt;
    
    </summary>
    
      <category term="区块链" scheme="http://yqsailor.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="以太坊" scheme="http://yqsailor.github.io/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="区块链" scheme="http://yqsailor.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="ERC20" scheme="http://yqsailor.github.io/tags/ERC20/"/>
    
  </entry>
  
  <entry>
    <title>IPFS</title>
    <link href="http://yqsailor.github.io/2018/09/13/ipfs/"/>
    <id>http://yqsailor.github.io/2018/09/13/ipfs/</id>
    <published>2018-09-13T09:18:28.000Z</published>
    <updated>2018-09-13T14:20:58.491Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ipfs.io/" target="_blank" rel="noopener">IPFS</a>的全称是InterPlanetary File System星际文件系统，是一个点对点的网络超媒体协议。它的目标是成为更快、更安全、更开放的下一代互联网。<br><img src="/2018/09/13/ipfs/images/ipfs-cover.png"></p><h2 id="IPFS介绍"><a href="#IPFS介绍" class="headerlink" title="IPFS介绍"></a>IPFS介绍</h2><h3 id="IPFS尝试解决HTTP目前存在的四个问题："><a href="#IPFS尝试解决HTTP目前存在的四个问题：" class="headerlink" title="IPFS尝试解决HTTP目前存在的四个问题："></a>IPFS尝试解决HTTP目前存在的四个问题：</h3><p>. 服务低效，成本高。这也是大部分P2P服务比中心化服务器优秀的地方。</p><p>. 网络服务受限于供应商，文件具有无法永久保存的风险，更无法历史回溯。</p><p>. 中心化的网络权力过于集中，网络控制和监管某些程度上限制了科技创新。</p><p>. 互联网服务大多依赖于骨干网络，一旦宕机大部分服务将无法使用。</p><h3 id="IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。"><a href="#IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。" class="headerlink" title="IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。"></a>IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。</h3><a id="more"></a><p>在IPFS网络上，每个IPFS上的文件都具备一个唯一的哈希码。IPFS同时具备了文件去重和历史版本的功能，每个网络节点会存储自己感兴趣的内容，并且索引其它内容的位置，用户可以通过哈希码来寻找到每个文件的具体位置。此外IPFS本身还自带一个IPNS的域名，可以把你的内容和你的个人域名进行绑定。</p><h2 id="IPFS的下载与安装"><a href="#IPFS的下载与安装" class="headerlink" title="IPFS的下载与安装"></a>IPFS的下载与安装</h2><p>可参考官网：<a href="https://ipfs.io/docs/install" target="_blank" rel="noopener">https://ipfs.io/docs/install</a> ，备注：目前需要科学上网才能访问</p><p>本文以mac环境下安装为例进行说明（mac下也可以用homebrew执行<code>brew install ipfs</code>进行安装），在terminal内输入以下命令进行下载与安装。本文时间(2018.9.13)的最新版本为v0.4.17，<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar go-ipfs_v0.4.17_darwin-amd64.tar.gz</span><br><span class="line">cd go-ipfs</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></p><p>安装后使用help命令，可以测试是否成功。</p><p><code>ipfs help</code></p><h3 id="IPFS的启动"><a href="#IPFS的启动" class="headerlink" title="IPFS的启动"></a>IPFS的启动</h3><p>使用参考：<a href="https://ipfs.io/docs/getting-started" target="_blank" rel="noopener">https://ipfs.io/docs/getting-started</a></p><p>首先进行初始化，创建一个全局的本地仓库与配置文件。</p><p><code>ipfs init</code></p><p>然后需要开启IPFS的进程从而与网络保持连接状态。这里加上&amp;是为了让进程在后台运行，可以在开启后同时按CTRL键C键回到之前界面。</p><p><code>ipfs daemon &amp;</code></p><p>可以通过下面的命令查看我们在IPFS网络上已经连接的节点</p><p><code>ipfs swarm peers</code></p><h2 id="IPFS的使用"><a href="#IPFS的使用" class="headerlink" title="IPFS的使用"></a>IPFS的使用</h2><p>这里讲解一下hexo搭建的个人博客上传到IPFS网络上。hexo搭建个人博客请移步至hexo+next搭建个人博客，并发布到git pages</p><p>1、使用命令<code>ipfs id</code>查看你的电脑的ipfs id</p><p>2、修改全局配置_config.yml中的root为<code>/ipns/${ipfsId}</code>,其中的ipfsId为你电脑对应的ipfs id</p><p>3、在你的hexo搭建的博客根目录下执行如下命令打包生成对应的静态文件。</p><p><code>hexo generate（hexo g也可以）</code></p><p>4、通过ipfs add命令，直接把项目直接添加到IPFS网络。</p><p><code>ipfs add -r public/</code></p><img src="/2018/09/13/ipfs/images/ipfs-add.png"><p>5、通过<code>ipfs name pulished</code>命令，把项目绑定到IPNS。</p><p><code>ipfs name publish QmcmaC834fyeqXuxZmkKd2ukSLsZY5tprGffzCXrpKzAZ8</code></p><p> 完成这一步后，你应该会在Terminal里看到如下运行结果，你的ipfs id标识了你的文件在网路上的位置。</p><p><code>Published to 你的ipfs id: /ipfs/QmcmaC834fyeqXuxZmkKd2ukSLsZY5tprGffzCXrpKzAZ8</code></p><p>6、现在你的文件已经在IPFS上了，网络为了避免垃圾资源过度的情况会在一段时间之后清空数据。为了保证我们的文件能够一直保持在IPFS网络上，我们需要执行pin命令，这样只要你的IPFS进程还开启着，数据就不会被垃圾回收。</p><p><code>ipfs pin add -r QmcmaC834fyeqXuxZmkKd2ukSLsZY5tprGffzCXrpKzAZ8</code></p><p>现在你的个人网站已经搭建在了一个完全去中心化的网络上了。你可以通过网址 <a href="https://gateway.ipfs.io/ipns/你的ipfsId" target="_blank" rel="noopener">https://gateway.ipfs.io/ipns/你的ipfsId</a> 访问你的个人主页，也可以通过<a href="http://127.0.0.1:8080/ipns/你的ipfsId" target="_blank" rel="noopener">http://127.0.0.1:8080/ipns/你的ipfsId</a> 。另外要注意的是，IPFS的网关目前需要科学上网才能连接，当然，在没有优化之前，访问会很慢，但可以打开。</p><p>7、 绑定独立域名<br>将博客发布到了IPFS运行的区块链节点上，但复杂的site_hash并不友好，我们可以使用IPNS技术，通过绑定独立域名来实现与现有的网站访问并无任何不一样的体现。我们假设你已经有一个可以正常使用的域名，如aa.com，没有域名的可以到任意域名服务商初购买。</p><p>有了域名之后，为域名aa.com添加TXT记录为<strong>dnslink=/ipns/你的ipfsId</strong>,同时将域名A记录指向任意ipfs节点的ip，如gateway.ipfs.io。</p><p>现在访问aa.com，你是不是发现已经可以正常访问你刚才生成的博客了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ipfs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IPFS&lt;/a&gt;的全称是InterPlanetary File System星际文件系统，是一个点对点的网络超媒体协议。它的目标是成为更快、更安全、更开放的下一代互联网。&lt;br&gt;&lt;img src=&quot;/2018/09/13/ipfs/images/ipfs-cover.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;IPFS介绍&quot;&gt;&lt;a href=&quot;#IPFS介绍&quot; class=&quot;headerlink&quot; title=&quot;IPFS介绍&quot;&gt;&lt;/a&gt;IPFS介绍&lt;/h2&gt;&lt;h3 id=&quot;IPFS尝试解决HTTP目前存在的四个问题：&quot;&gt;&lt;a href=&quot;#IPFS尝试解决HTTP目前存在的四个问题：&quot; class=&quot;headerlink&quot; title=&quot;IPFS尝试解决HTTP目前存在的四个问题：&quot;&gt;&lt;/a&gt;IPFS尝试解决HTTP目前存在的四个问题：&lt;/h3&gt;&lt;p&gt;. 服务低效，成本高。这也是大部分P2P服务比中心化服务器优秀的地方。&lt;/p&gt;
&lt;p&gt;. 网络服务受限于供应商，文件具有无法永久保存的风险，更无法历史回溯。&lt;/p&gt;
&lt;p&gt;. 中心化的网络权力过于集中，网络控制和监管某些程度上限制了科技创新。&lt;/p&gt;
&lt;p&gt;. 互联网服务大多依赖于骨干网络，一旦宕机大部分服务将无法使用。&lt;/p&gt;
&lt;h3 id=&quot;IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。&quot;&gt;&lt;a href=&quot;#IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。&quot; class=&quot;headerlink&quot; title=&quot;IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。&quot;&gt;&lt;/a&gt;IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。&lt;/h3&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yqsailor.github.io/categories/Web/"/>
    
    
      <category term="IPFS" scheme="http://yqsailor.github.io/tags/IPFS/"/>
    
      <category term="Web" scheme="http://yqsailor.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Next 搭建个人博客</title>
    <link href="http://yqsailor.github.io/2018/09/12/hexo/"/>
    <id>http://yqsailor.github.io/2018/09/12/hexo/</id>
    <published>2018-09-12T02:02:31.000Z</published>
    <updated>2018-09-13T14:20:41.224Z</updated>
    
    <content type="html"><![CDATA[<p>突然有了写博客的想法，今天就研究了下如何搭建自己的博客，之后看到了比较流行的组合为Hexo + Next + Git pages，于事就一步步搭建了自己的博客，中间也踩了很多坑，因此想把这个经过记录下来，希望能帮到一些想搭建自己的博客的同志们。</p><h1 id="为什么选择Hexo"><a href="#为什么选择Hexo" class="headerlink" title="为什么选择Hexo"></a>为什么选择Hexo</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 。 它有以下特点：</p><ul><li><i class="fa fa-bolt"></i><h6 style="display: inline;">　超快速度</h6><br><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></li><li><i class="fa fa-pencil"></i><h6 style="display: inline;">　支持Markdown</h6><br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li><li><i class="fa fa-cloud-upload"></i><h6 style="display: inline;">　一键部署</h6><br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li><li><i class="fa fa-cog"></i><h6 style="display: inline;">　丰富的插件</h6><br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li></ul><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">标签插件</a> 来快速的插入特定形式的内容。</p><p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>。<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 因其 <span id="yu-1">精于心，简于形</span> 的风格，一直被广大用户所喜爱。</p><a id="more"></a><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装:</p><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></p></blockquote><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul><li>Mac：一般情况下自带git无需安装，如未安装使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>，<a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装</li><li>Windows：下载安装 git 。<a id="download" href="https://git-scm.com/download/win" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span></a></li></ul><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。（nvm：Node Version Manager）</p><h3 id="Mac-下安装-nvm"><a href="#Mac-下安装-nvm" class="headerlink" title="Mac 下安装 nvm"></a>Mac 下安装 nvm</h3><p>1、执行如下命令，需要先安装Git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/creationix/nvm.git .nvm</span><br></pre></td></tr></table></figure></p><p>2、将以下代码添加到 <code>~/.bashrc</code>, <code>~/.profile</code>, 或者 <code>~/.zshrc</code> 文件中，然后执行命令<code>source ~/.bashrc</code>重启配置信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure></p><h3 id="Windows-下安装-nvm"><a href="#Windows-下安装-nvm" class="headerlink" title="Windows 下安装 nvm"></a>Windows 下安装 nvm</h3><p>首先需要下载安装<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>，<a id="download" href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a></p><p>安装完nvm以后，我们可以打开命令行中执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nvm</span><br><span class="line">$ nvm install latest</span><br></pre></td></tr></table></figure></p><p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。<br><div class="note warning"><p> 如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。 <a id="download" href="https://nodejs.org/en/download/" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a></p></div></p><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id="inline-green">指定文件夹</span>（例如我创建了一个文件夹blog 。<code>/Users/yq/blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>等待安装，安装完成后，<span id="inline-green">指定文件夹</span> 的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└──</span><br></pre></td></tr></table></figure></p><p>我们继续执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p><p>Hexo 将 source 文件夹中除 _posts 文件夹之外，开头命名为 _(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，就可以看到基于 Hexo 的默认主题的原型：<br><img src="/2018/09/12/hexo/images/hexo-default-theme.png" title="Hexo default theme"></p><h1 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h1><h2 id="1、下载-NexT-主题"><a href="#1、下载-NexT-主题" class="headerlink" title="1、下载 NexT 主题"></a>1、下载 NexT 主题</h2><p>依旧是在当前目录下，执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>等待下载完成。<br><div class="note warning"><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong></p></div></p><h2 id="2、启用-NexT-主题"><a href="#2、启用-NexT-主题" class="headerlink" title="2、启用 NexT 主题"></a>2、启用 NexT 主题</h2><p>打开 <strong>站点配置文件</strong> ，找到 theme 字段，并将其值更改为 next 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p><h2 id="3、验证主题"><a href="#3、验证主题" class="headerlink" title="3、验证主题"></a>3、验证主题</h2><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，检查站点是否正确运行。</p><div class="note success"><p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p></div><img src="/2018/09/12/hexo/images/hexo-next-theme.png" title="NexT Muse theme">现在，我们已经成功安装并启用了 NexT 主题。<div class="note primary"><p>关于更多基本操作和基础知识，请查阅 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 与 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 官方文档.</p></div><h1 id="发布到GitHub"><a href="#发布到GitHub" class="headerlink" title="发布到GitHub"></a>发布到GitHub</h1><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>Github Pages分为两类，用户或组织主页，项目主页。</p><p>创建用户或组织主页，只需创建一个名称为{yourusername}.github.io的新仓库即可。这边的yourusername填写自己的用户名。Github会识别并自动将该仓库设为Github Pages。用户主页是唯一的，填其他名称只会被当成普通项目。<br>创建项目主页。先新建一个仓库，名称随意，或是使用原有的仓库都可以。在项目主页 -&gt; Settings -&gt; Options -&gt; Github Pages中，将Source选项置为master branch(<em>如果无法设置就先选择一个主题</em>)，然后Save，这个项目就变成一个Github Pages项目了。</p><img src="/2018/09/12/hexo/images/git-pages-setting.png"><h2 id="安装deploy插件"><a href="#安装deploy插件" class="headerlink" title="安装deploy插件"></a>安装deploy插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="配置发布信息"><a href="#配置发布信息" class="headerlink" title="配置发布信息"></a>配置发布信息</h2><p>修改主题配置文件中的仓库信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt;  <span class="comment"># 仓库地址，例如我的是https://github.com/yqsailor/yqsailor.github.io</span></span><br><span class="line">  branch: [branch] <span class="comment"># 仓库分支，一般为master</span></span><br><span class="line">  message: [message]  <span class="comment"># git提交注释，此项可留空</span></span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="本地调试步骤"><a href="#本地调试步骤" class="headerlink" title="本地调试步骤"></a>本地调试步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p><p>这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。</p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>当然在部署之前，需要先配置好配置文件中的 deploy。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"postName"</span>  <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment"># 新建页面</span></span><br><span class="line">$ hexo generate <span class="comment"># 生成静态页面至public目录</span></span><br><span class="line">$ hexo server <span class="comment"># 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)</span></span><br><span class="line">$ hexo deploy <span class="comment"># 项目部署</span></span><br><span class="line">$ hexo <span class="built_in">help</span> <span class="comment"># 查看帮助</span></span><br><span class="line">$ hexo version <span class="comment"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure><h2 id="简写命令"><a href="#简写命令" class="headerlink" title="简写命令"></a>简写命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new == hexo n</span><br><span class="line">$ hexo generate == hexo g</span><br><span class="line">$ hexo server == hexo s</span><br><span class="line">$ hexo deploy == hexo d</span><br></pre></td></tr></table></figure><h2 id="常见问题1"><a href="#常见问题1" class="headerlink" title="常见问题1"></a>常见问题1</h2><p>在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>正确的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">author: yq</span><br><span class="line">email: yqsailor@gmail.com</span><br><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><h2 id="常见问题2"><a href="#常见问题2" class="headerlink" title="常见问题2"></a>常见问题2</h2><p>关于 Git 提交中用户名和 Email 的设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your name&quot;</span><br><span class="line">git config --global user.email &quot;Your email&quot;</span><br></pre></td></tr></table></figure></p><h2 id="常见问题3"><a href="#常见问题3" class="headerlink" title="常见问题3"></a>常见问题3</h2><p>Hexo 中的图标使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class="fa fa-github"></i> <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-lg"></i> <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-2x"></i> <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p><p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p><p id="div-border-top-green"><i><a href="https://github.com/yqsailor/blog" target="_blank" rel="noopener">博客源码</a> ， 欢迎 star<br></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然有了写博客的想法，今天就研究了下如何搭建自己的博客，之后看到了比较流行的组合为Hexo + Next + Git pages，于事就一步步搭建了自己的博客，中间也踩了很多坑，因此想把这个经过记录下来，希望能帮到一些想搭建自己的博客的同志们。&lt;/p&gt;
&lt;h1 id=&quot;为什么选择Hexo&quot;&gt;&lt;a href=&quot;#为什么选择Hexo&quot; class=&quot;headerlink&quot; title=&quot;为什么选择Hexo&quot;&gt;&lt;/a&gt;为什么选择Hexo&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的静态站点生成框架，它基于 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt; 。 它有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-bolt&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　超快速度&lt;/h6&gt;&lt;br&gt;&lt;i&gt;Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　支持Markdown&lt;/h6&gt;&lt;br&gt;&lt;i&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-cloud-upload&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　一键部署&lt;/h6&gt;&lt;br&gt;&lt;i&gt;只需一条指令即可部署到Github Pages，或其他网站&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-cog&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　丰富的插件&lt;/h6&gt;&lt;br&gt;&lt;i&gt;Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 &lt;a href=&quot;https://hexo.io/zh-cn/docs/tag-plugins.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;标签插件&lt;/a&gt; 来快速的插入特定形式的内容。&lt;/p&gt;
&lt;p&gt;基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;主题&lt;/a&gt;。&lt;br&gt;&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NexT&lt;/a&gt; 因其 &lt;span id=&quot;yu-1&quot;&gt;精于心，简于形&lt;/span&gt; 的风格，一直被广大用户所喜爱。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yqsailor.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yqsailor.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yqsailor.github.io/tags/Next/"/>
    
  </entry>
  
</feed>
