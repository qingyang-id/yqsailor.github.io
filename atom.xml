<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sailor&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/f0a11b74c6f6203dc74f7202fbe88c6a</icon>
  <subtitle>Stay Hungry,Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yqsailor.github.io/"/>
  <updated>2018-09-13T14:20:58.491Z</updated>
  <id>http://yqsailor.github.io/</id>
  
  <author>
    <name>Sailor</name>
    <email>yqsailor@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IPFS</title>
    <link href="http://yqsailor.github.io/2018/09/13/ipfs/"/>
    <id>http://yqsailor.github.io/2018/09/13/ipfs/</id>
    <published>2018-09-13T09:18:28.000Z</published>
    <updated>2018-09-13T14:20:58.491Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ipfs.io/" target="_blank" rel="noopener">IPFS</a>的全称是InterPlanetary File System星际文件系统，是一个点对点的网络超媒体协议。它的目标是成为更快、更安全、更开放的下一代互联网。<br><img src="/2018/09/13/ipfs/images/ipfs-cover.png"></p><h2 id="IPFS介绍"><a href="#IPFS介绍" class="headerlink" title="IPFS介绍"></a>IPFS介绍</h2><h3 id="IPFS尝试解决HTTP目前存在的四个问题："><a href="#IPFS尝试解决HTTP目前存在的四个问题：" class="headerlink" title="IPFS尝试解决HTTP目前存在的四个问题："></a>IPFS尝试解决HTTP目前存在的四个问题：</h3><p>. 服务低效，成本高。这也是大部分P2P服务比中心化服务器优秀的地方。</p><p>. 网络服务受限于供应商，文件具有无法永久保存的风险，更无法历史回溯。</p><p>. 中心化的网络权力过于集中，网络控制和监管某些程度上限制了科技创新。</p><p>. 互联网服务大多依赖于骨干网络，一旦宕机大部分服务将无法使用。</p><h3 id="IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。"><a href="#IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。" class="headerlink" title="IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。"></a>IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。</h3><a id="more"></a><p>在IPFS网络上，每个IPFS上的文件都具备一个唯一的哈希码。IPFS同时具备了文件去重和历史版本的功能，每个网络节点会存储自己感兴趣的内容，并且索引其它内容的位置，用户可以通过哈希码来寻找到每个文件的具体位置。此外IPFS本身还自带一个IPNS的域名，可以把你的内容和你的个人域名进行绑定。</p><h2 id="IPFS的下载与安装"><a href="#IPFS的下载与安装" class="headerlink" title="IPFS的下载与安装"></a>IPFS的下载与安装</h2><p>可参考官网：<a href="https://ipfs.io/docs/install" target="_blank" rel="noopener">https://ipfs.io/docs/install</a> ，备注：目前需要科学上网才能访问</p><p>本文以mac环境下安装为例进行说明（mac下也可以用homebrew执行<code>brew install ipfs</code>进行安装），在terminal内输入以下命令进行下载与安装。本文时间(2018.9.13)的最新版本为v0.4.17，<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar go-ipfs_v0.4.17_darwin-amd64.tar.gz</span><br><span class="line">cd go-ipfs</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure></p><p>安装后使用help命令，可以测试是否成功。</p><p><code>ipfs help</code></p><h3 id="IPFS的启动"><a href="#IPFS的启动" class="headerlink" title="IPFS的启动"></a>IPFS的启动</h3><p>使用参考：<a href="https://ipfs.io/docs/getting-started" target="_blank" rel="noopener">https://ipfs.io/docs/getting-started</a></p><p>首先进行初始化，创建一个全局的本地仓库与配置文件。</p><p><code>ipfs init</code></p><p>然后需要开启IPFS的进程从而与网络保持连接状态。这里加上&amp;是为了让进程在后台运行，可以在开启后同时按CTRL键C键回到之前界面。</p><p><code>ipfs daemon &amp;</code></p><p>可以通过下面的命令查看我们在IPFS网络上已经连接的节点</p><p><code>ipfs swarm peers</code></p><h2 id="IPFS的使用"><a href="#IPFS的使用" class="headerlink" title="IPFS的使用"></a>IPFS的使用</h2><p>这里讲解一下hexo搭建的个人博客上传到IPFS网络上。hexo搭建个人博客请移步至hexo+next搭建个人博客，并发布到git pages</p><p>1、使用命令<code>ipfs id</code>查看你的电脑的ipfs id</p><p>2、修改全局配置_config.yml中的root为<code>/ipns/${ipfsId}</code>,其中的ipfsId为你电脑对应的ipfs id</p><p>3、在你的hexo搭建的博客根目录下执行如下命令打包生成对应的静态文件。</p><p><code>hexo generate（hexo g也可以）</code></p><p>4、通过ipfs add命令，直接把项目直接添加到IPFS网络。</p><p><code>ipfs add -r public/</code></p><img src="/2018/09/13/ipfs/images/ipfs-add.png"><p>5、通过<code>ipfs name pulished</code>命令，把项目绑定到IPNS。</p><p><code>ipfs name publish QmcmaC834fyeqXuxZmkKd2ukSLsZY5tprGffzCXrpKzAZ8</code></p><p> 完成这一步后，你应该会在Terminal里看到如下运行结果，你的ipfs id标识了你的文件在网路上的位置。</p><p><code>Published to 你的ipfs id: /ipfs/QmcmaC834fyeqXuxZmkKd2ukSLsZY5tprGffzCXrpKzAZ8</code></p><p>6、现在你的文件已经在IPFS上了，网络为了避免垃圾资源过度的情况会在一段时间之后清空数据。为了保证我们的文件能够一直保持在IPFS网络上，我们需要执行pin命令，这样只要你的IPFS进程还开启着，数据就不会被垃圾回收。</p><p><code>ipfs pin add -r QmcmaC834fyeqXuxZmkKd2ukSLsZY5tprGffzCXrpKzAZ8</code></p><p>现在你的个人网站已经搭建在了一个完全去中心化的网络上了。你可以通过网址 <a href="https://gateway.ipfs.io/ipns/你的ipfsId" target="_blank" rel="noopener">https://gateway.ipfs.io/ipns/你的ipfsId</a> 访问你的个人主页，也可以通过<a href="http://127.0.0.1:8080/ipns/你的ipfsId" target="_blank" rel="noopener">http://127.0.0.1:8080/ipns/你的ipfsId</a> 。另外要注意的是，IPFS的网关目前需要科学上网才能连接，当然，在没有优化之前，访问会很慢，但可以打开。</p><p>7、 绑定独立域名<br>将博客发布到了IPFS运行的区块链节点上，但复杂的site_hash并不友好，我们可以使用IPNS技术，通过绑定独立域名来实现与现有的网站访问并无任何不一样的体现。我们假设你已经有一个可以正常使用的域名，如aa.com，没有域名的可以到任意域名服务商初购买。</p><p>有了域名之后，为域名aa.com添加TXT记录为<strong>dnslink=/ipns/你的ipfsId</strong>,同时将域名A记录指向任意ipfs节点的ip，如gateway.ipfs.io。</p><p>现在访问aa.com，你是不是发现已经可以正常访问你刚才生成的博客了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ipfs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IPFS&lt;/a&gt;的全称是InterPlanetary File System星际文件系统，是一个点对点的网络超媒体协议。它的目标是成为更快、更安全、更开放的下一代互联网。&lt;br&gt;&lt;img src=&quot;/2018/09/13/ipfs/images/ipfs-cover.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;IPFS介绍&quot;&gt;&lt;a href=&quot;#IPFS介绍&quot; class=&quot;headerlink&quot; title=&quot;IPFS介绍&quot;&gt;&lt;/a&gt;IPFS介绍&lt;/h2&gt;&lt;h3 id=&quot;IPFS尝试解决HTTP目前存在的四个问题：&quot;&gt;&lt;a href=&quot;#IPFS尝试解决HTTP目前存在的四个问题：&quot; class=&quot;headerlink&quot; title=&quot;IPFS尝试解决HTTP目前存在的四个问题：&quot;&gt;&lt;/a&gt;IPFS尝试解决HTTP目前存在的四个问题：&lt;/h3&gt;&lt;p&gt;. 服务低效，成本高。这也是大部分P2P服务比中心化服务器优秀的地方。&lt;/p&gt;
&lt;p&gt;. 网络服务受限于供应商，文件具有无法永久保存的风险，更无法历史回溯。&lt;/p&gt;
&lt;p&gt;. 中心化的网络权力过于集中，网络控制和监管某些程度上限制了科技创新。&lt;/p&gt;
&lt;p&gt;. 互联网服务大多依赖于骨干网络，一旦宕机大部分服务将无法使用。&lt;/p&gt;
&lt;h3 id=&quot;IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。&quot;&gt;&lt;a href=&quot;#IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。&quot; class=&quot;headerlink&quot; title=&quot;IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。&quot;&gt;&lt;/a&gt;IPFS的野心是取代现在的HTTP，去创建一个全新的去中心化网络。&lt;/h3&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yqsailor.github.io/categories/Web/"/>
    
    
      <category term="IPFS" scheme="http://yqsailor.github.io/tags/IPFS/"/>
    
      <category term="Web" scheme="http://yqsailor.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Next 搭建个人博客</title>
    <link href="http://yqsailor.github.io/2018/09/12/hexo/"/>
    <id>http://yqsailor.github.io/2018/09/12/hexo/</id>
    <published>2018-09-12T02:02:31.000Z</published>
    <updated>2018-09-13T14:20:41.224Z</updated>
    
    <content type="html"><![CDATA[<p>突然有了写博客的想法，今天就研究了下如何搭建自己的博客，之后看到了比较流行的组合为Hexo + Next + Git pages，于事就一步步搭建了自己的博客，中间也踩了很多坑，因此想把这个经过记录下来，希望能帮到一些想搭建自己的博客的同志们。</p><h1 id="为什么选择Hexo"><a href="#为什么选择Hexo" class="headerlink" title="为什么选择Hexo"></a>为什么选择Hexo</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 。 它有以下特点：</p><ul><li><i class="fa fa-bolt"></i><h6 style="display: inline;">　超快速度</h6><br><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></li><li><i class="fa fa-pencil"></i><h6 style="display: inline;">　支持Markdown</h6><br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li><li><i class="fa fa-cloud-upload"></i><h6 style="display: inline;">　一键部署</h6><br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li><li><i class="fa fa-cog"></i><h6 style="display: inline;">　丰富的插件</h6><br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li></ul><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">标签插件</a> 来快速的插入特定形式的内容。</p><p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>。<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 因其 <span id="yu-1">精于心，简于形</span> 的风格，一直被广大用户所喜爱。</p><a id="more"></a><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装:</p><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></p></blockquote><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul><li>Mac：一般情况下自带git无需安装，如未安装使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>，<a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装</li><li>Windows：下载安装 git 。<a id="download" href="https://git-scm.com/download/win" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span></a></li></ul><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。（nvm：Node Version Manager）</p><h3 id="Mac-下安装-nvm"><a href="#Mac-下安装-nvm" class="headerlink" title="Mac 下安装 nvm"></a>Mac 下安装 nvm</h3><p>1、执行如下命令，需要先安装Git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/creationix/nvm.git .nvm</span><br></pre></td></tr></table></figure></p><p>2、将以下代码添加到 <code>~/.bashrc</code>, <code>~/.profile</code>, 或者 <code>~/.zshrc</code> 文件中，然后执行命令<code>source ~/.bashrc</code>重启配置信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure></p><h3 id="Windows-下安装-nvm"><a href="#Windows-下安装-nvm" class="headerlink" title="Windows 下安装 nvm"></a>Windows 下安装 nvm</h3><p>首先需要下载安装<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>，<a id="download" href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a></p><p>安装完nvm以后，我们可以打开命令行中执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nvm</span><br><span class="line">$ nvm install latest</span><br></pre></td></tr></table></figure></p><p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。<br><div class="note warning"><p> 如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。 <a id="download" href="https://nodejs.org/en/download/" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a></p></div></p><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id="inline-green">指定文件夹</span>（例如我创建了一个文件夹blog 。<code>/Users/yq/blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>等待安装，安装完成后，<span id="inline-green">指定文件夹</span> 的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└──</span><br></pre></td></tr></table></figure></p><p>我们继续执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p><p>Hexo 将 source 文件夹中除 _posts 文件夹之外，开头命名为 _(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，就可以看到基于 Hexo 的默认主题的原型：<br><img src="/2018/09/12/hexo/images/hexo-default-theme.png" title="Hexo default theme"></p><h1 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h1><h2 id="1、下载-NexT-主题"><a href="#1、下载-NexT-主题" class="headerlink" title="1、下载 NexT 主题"></a>1、下载 NexT 主题</h2><p>依旧是在当前目录下，执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>等待下载完成。<br><div class="note warning"><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong></p></div></p><h2 id="2、启用-NexT-主题"><a href="#2、启用-NexT-主题" class="headerlink" title="2、启用 NexT 主题"></a>2、启用 NexT 主题</h2><p>打开 <strong>站点配置文件</strong> ，找到 theme 字段，并将其值更改为 next 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p><h2 id="3、验证主题"><a href="#3、验证主题" class="headerlink" title="3、验证主题"></a>3、验证主题</h2><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>此时即可使用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，检查站点是否正确运行。</p><div class="note success"><p>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p></div><img src="/2018/09/12/hexo/images/hexo-next-theme.png" title="NexT Muse theme">现在，我们已经成功安装并启用了 NexT 主题。<div class="note primary"><p>关于更多基本操作和基础知识，请查阅 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 与 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 官方文档.</p></div><h1 id="发布到GitHub"><a href="#发布到GitHub" class="headerlink" title="发布到GitHub"></a>发布到GitHub</h1><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>Github Pages分为两类，用户或组织主页，项目主页。</p><p>创建用户或组织主页，只需创建一个名称为{yourusername}.github.io的新仓库即可。这边的yourusername填写自己的用户名。Github会识别并自动将该仓库设为Github Pages。用户主页是唯一的，填其他名称只会被当成普通项目。<br>创建项目主页。先新建一个仓库，名称随意，或是使用原有的仓库都可以。在项目主页 -&gt; Settings -&gt; Options -&gt; Github Pages中，将Source选项置为master branch(<em>如果无法设置就先选择一个主题</em>)，然后Save，这个项目就变成一个Github Pages项目了。</p><img src="/2018/09/12/hexo/images/git-pages-setting.png"><h2 id="安装deploy插件"><a href="#安装deploy插件" class="headerlink" title="安装deploy插件"></a>安装deploy插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="配置发布信息"><a href="#配置发布信息" class="headerlink" title="配置发布信息"></a>配置发布信息</h2><p>修改主题配置文件中的仓库信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt;  <span class="comment"># 仓库地址，例如我的是https://github.com/yqsailor/yqsailor.github.io</span></span><br><span class="line">  branch: [branch] <span class="comment"># 仓库分支，一般为master</span></span><br><span class="line">  message: [message]  <span class="comment"># git提交注释，此项可留空</span></span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="本地调试步骤"><a href="#本地调试步骤" class="headerlink" title="本地调试步骤"></a>本地调试步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p><p>这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。</p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>当然在部署之前，需要先配置好配置文件中的 deploy。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"postName"</span>  <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment"># 新建页面</span></span><br><span class="line">$ hexo generate <span class="comment"># 生成静态页面至public目录</span></span><br><span class="line">$ hexo server <span class="comment"># 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)</span></span><br><span class="line">$ hexo deploy <span class="comment"># 项目部署</span></span><br><span class="line">$ hexo <span class="built_in">help</span> <span class="comment"># 查看帮助</span></span><br><span class="line">$ hexo version <span class="comment"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure><h2 id="简写命令"><a href="#简写命令" class="headerlink" title="简写命令"></a>简写命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new == hexo n</span><br><span class="line">$ hexo generate == hexo g</span><br><span class="line">$ hexo server == hexo s</span><br><span class="line">$ hexo deploy == hexo d</span><br></pre></td></tr></table></figure><h2 id="常见问题1"><a href="#常见问题1" class="headerlink" title="常见问题1"></a>常见问题1</h2><p>在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>正确的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">author: yq</span><br><span class="line">email: yqsailor@gmail.com</span><br><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><h2 id="常见问题2"><a href="#常见问题2" class="headerlink" title="常见问题2"></a>常见问题2</h2><p>关于 Git 提交中用户名和 Email 的设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your name&quot;</span><br><span class="line">git config --global user.email &quot;Your email&quot;</span><br></pre></td></tr></table></figure></p><h2 id="常见问题3"><a href="#常见问题3" class="headerlink" title="常见问题3"></a>常见问题3</h2><p>Hexo 中的图标使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class="fa fa-github"></i> <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-lg"></i> <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-2x"></i> <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p><p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p><p id="div-border-top-green"><i><a href="https://github.com/yqsailor/blog" target="_blank" rel="noopener">博客源码</a> ， 欢迎 star<br></i></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;突然有了写博客的想法，今天就研究了下如何搭建自己的博客，之后看到了比较流行的组合为Hexo + Next + Git pages，于事就一步步搭建了自己的博客，中间也踩了很多坑，因此想把这个经过记录下来，希望能帮到一些想搭建自己的博客的同志们。&lt;/p&gt;
&lt;h1 id=&quot;为什么选择Hexo&quot;&gt;&lt;a href=&quot;#为什么选择Hexo&quot; class=&quot;headerlink&quot; title=&quot;为什么选择Hexo&quot;&gt;&lt;/a&gt;为什么选择Hexo&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的静态站点生成框架，它基于 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node.js&lt;/a&gt; 。 它有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-bolt&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　超快速度&lt;/h6&gt;&lt;br&gt;&lt;i&gt;Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　支持Markdown&lt;/h6&gt;&lt;br&gt;&lt;i&gt;Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-cloud-upload&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　一键部署&lt;/h6&gt;&lt;br&gt;&lt;i&gt;只需一条指令即可部署到Github Pages，或其他网站&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;&lt;i class=&quot;fa fa-cog&quot;&gt;&lt;/i&gt;&lt;h6 style=&quot;display: inline;&quot;&gt;　丰富的插件&lt;/h6&gt;&lt;br&gt;&lt;i&gt;Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 &lt;a href=&quot;https://hexo.io/zh-cn/docs/tag-plugins.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;标签插件&lt;/a&gt; 来快速的插入特定形式的内容。&lt;/p&gt;
&lt;p&gt;基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;主题&lt;/a&gt;。&lt;br&gt;&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NexT&lt;/a&gt; 因其 &lt;span id=&quot;yu-1&quot;&gt;精于心，简于形&lt;/span&gt; 的风格，一直被广大用户所喜爱。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yqsailor.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yqsailor.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yqsailor.github.io/tags/Next/"/>
    
  </entry>
  
</feed>
